syntax = "proto3";
package SimpleNetworkFilesystem;

service NFS {
  rpc getattr (Path) returns (Stat) {}
  rpc readdir (Path) returns (stream Dirent) {}
  rpc open (FuseFileInfo) returns (FuseFileInfo) {}
  rpc read (ReadRequest) returns (ReadReply) {}
  rpc write (WriteRequest) returns (WriteReply){}
  rpc create (CreateRequest) returns (FuseFileInfo) {}
  rpc unlink (Path) returns (ErrnoReply) {}
  rpc mkdir (MkdirRequest) returns (ErrnoReply) {}
  rpc rmdir (Path) returns (ErrnoReply) {}
  rpc rename (RenameRequest) returns (ErrnoReply) {}
  rpc utimens(UtimensRequest) returns (ErrnoReply) {}
  rpc commitWrites(CommitRequest) returns (CommitResponse) {}
}

message Path {
  string path = 1;
}

message Stat {
  uint64 dev = 1;  /* Device.  */
  uint64 ino = 2;  /* File serial number.	*/
  uint64 nlink = 3;  /* Link count.  */
  uint32 mode = 4;  /* File mode.  */
  uint32 uid = 5;  /* User ID of the file's owner.	*/
  uint32 gid = 6;  /* Group ID of the file's group.*/
  uint64 rdev = 7;  /* Device number, if device.  */
  int64 size = 8;  /* Size of file, in bytes.  */
  int64 blksize = 9;  /* Optimal block size for I/O.  */
  int64 blocks = 10;  /* Number 512-byte blocks allocated. */
  int64 atime = 11;  /* Time of last access.  */
  int64 mtime = 12;  /* Time of last modification.  */
  int64 ctime = 13;  /* Time of last status change.  */
  int32 err = 14;  /* error number  */
}

message Dirent {
  uint64 ino = 1;
  int64 off = 2;
  int32 reclen = 3;  // original unsigned short
  string type = 4;  // original unsigned char
  string name = 5;
  int32 err = 6;
}

message FuseFileInfo {
  int32 flags = 1;  // Open flags. Available in open() and release()
  int32 writepage = 2;  // In case of a write operation indicates if this was caused by a writepage
  uint64 fh = 3;  // File handle.  May be filled in by filesystem in open(). Available in all other file operations
  uint64 lock_owner = 4;  // Lock owner id.  Available in locking operations and flush
  int32 err = 5;
  string path = 6;
}

message ReadRequest {
  string path = 1;
  uint64 count = 2;
  int64 offset = 3;
}

message ReadReply {
  int32 bytes_read = 1;
  bytes buffer = 2;
  int32 err = 3;
}

message WriteRequest {
  string path = 1;
  uint32 count = 2;
  int64 offset = 3;
  bytes buffer = 4;
}

message WriteReply {
  int32 bytes_write = 1;
  int32 err = 2;
}

message CreateRequest {
  string path = 1;
  uint32 mode = 2;
  int32 flags = 3;
}

message MkdirRequest {
  string path = 1;
  uint32 mode = 2;
}

message ErrnoReply {
  int32 err = 1;
}

message RenameRequest {
  string from_path = 1;
  string to_path = 2;
}

message UtimensRequest {
  string path = 1;
  int64 access_sec = 2;
  int64 access_nsec = 3;
  int64 modify_sec = 4;
  int64 modify_nsec = 5;
}

message CommitRequest {
  uint64 fh = 1;
}

message CommitResponse {
  int32 err = 1;
}